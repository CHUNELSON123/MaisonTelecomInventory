@page "/addproduct"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@inject InventoryDbContext DbContext
@inject NavigationManager NavigationManager

<div class="add-product-container">
    <div class="header-container">
        <h1>Add New Product</h1>
        <a href="/products">
            <button class="back-button">Back</button>
        </a>
    </div>

    <EditForm Model="@productViewModel" OnValidSubmit="SaveProduct">
        <DataAnnotationsValidator />

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }
        <ValidationSummary />

        <div class="form-columns">
            <div class="form-column">
                <div class="form-group">
                    <label for="product-name">Product Name</label>
                    <InputText id="product-name" @bind-Value="productViewModel.Name" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="brand">Brand</label>
                    <InputSelect id="brand" @bind-Value="productViewModel.BrandID" class="form-control">
                        <option value="0">Select Brand</option>
                        @foreach (var brand in brands)
                        {
                            <option value="@brand.BrandID">@brand.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="form-group">
                    <label for="category">Category</label>
                    <InputSelect id="category" @bind-Value="productViewModel.CategoryID" class="form-control">
                        <option value="0">Select Category</option>
                        @foreach (var category in categories)
                        {
                            <option value="@category.CategoryID">@category.Name</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <div class="form-column">
                <div class="form-group">
                    <label for="cost-price">Cost Price</label>
                    <InputNumber id="cost-price" @bind-Value="productViewModel.CostPrice" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="selling-price">Selling Price</label>
                    <InputNumber id="selling-price" @bind-Value="productViewModel.SellingPrice" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="stock-quantity">Stock Quantity</label>
                    <InputNumber id="stock-quantity" @bind-Value="productViewModel.StockQuantity" class="form-control" />
                </div>
            </div>
        </div>

        <div class="action-buttons">
            <button type="submit" class="save-button">Save Product</button>
            <button type="button" class="cancel-button" @onclick="Cancel">Cancel</button>
        </div>
    </EditForm>
</div>

@code {
    private ProductViewModel productViewModel = new();
    private List<Brand> brands = new();
    private List<Category> categories = new();
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        brands = await DbContext.Brands.ToListAsync();
        categories = await DbContext.Categories.ToListAsync();
    }

    private async Task SaveProduct()
    {
        try
        {
            var product = new Product
            {
                Name = productViewModel.Name,
                BrandID = productViewModel.BrandID,
                CategoryID = productViewModel.CategoryID,
                CostPrice = productViewModel.CostPrice,
                SellingPrice = productViewModel.SellingPrice,
                StockQuantity = productViewModel.StockQuantity
            };

            DbContext.Products.Add(product);
            await DbContext.SaveChangesAsync();
            NavigationManager.NavigateTo("/products");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving product: {ex.GetBaseException().Message}";
            Console.WriteLine(ex.ToString());
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/products");
    }

    // A view model for validation
    public class ProductViewModel
    {
        [Required]
        [StringLength(200)]
        public string Name { get; set; }

        [Range(1, int.MaxValue, ErrorMessage = "Please select a valid brand.")]
        public int BrandID { get; set; }

        [Range(1, int.MaxValue, ErrorMessage = "Please select a valid category.")]
        public int CategoryID { get; set; }

        [Range(0.01, double.MaxValue, ErrorMessage = "Cost price must be greater than 0.")]
        public decimal CostPrice { get; set; }

        [Range(0.01, double.MaxValue, ErrorMessage = "Selling price must be greater than 0.")]
        public decimal SellingPrice { get; set; }

        [Range(0, int.MaxValue, ErrorMessage = "Stock quantity cannot be negative.")]
        public int StockQuantity { get; set; }
    }
}